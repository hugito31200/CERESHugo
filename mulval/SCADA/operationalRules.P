primitive(isSensor(_host)).
primitive(isActuator(_host)).
primitive(physicalAccess(_principal,_host)).
primitive(malicious(_principal)).

primitive(initiallyTriggered(_vulID)).
derived(isTriggered(_vulID)).

derived(accessInfo(_host)).
derived(dos(_host)).
derived(isCompromised(_device)).
derived(canSniffCommunication(_h1,_h2)).
derived(covertAppropriation(_plc)).

/******************************************************/
/*             Tabling Predicates                     */
/*   All derived predicates should be tabled          */
/******************************************************/

:- table isTriggered/1.
:- table accessInfo/1.
:- table isCompromised/1.
:- table canSniffCommunication/2.
:- table covertAppropriation/1.

/************Vulnerability triggering*******************/

interaction_rule(
  (isTriggered(VulID) :-
  vulExists(_,VulID,_,none,_)
  ),
  rule_desc('Vulnerability triggered from the start', certain)).

interaction_rule(
  (isTriggered(VulID) :-
  vulExists(_,VulID,_,Condition,_),
  vulExists(_,TriggeredVul,_,_,Condition),
  isTriggered(TriggeredVul)
  ),
  rule_desc('Trigger cascading vulnerability', certain)).

interaction_rule(
  (isTriggered(VulID) :-
  vulExists(H1,VulID,_,hijackcomm,_),
  execCode(H2,_),
  hacl(H2,H1,_,_)
  ),
  rule_desc('Hijack communication', likely)).


/*****Denial of Service*********/
/*From 'Simulating and Detecting Attacks of Untrusted Clients in OPC UA Networks'*/
interaction_rule(
  (dos(H) :-
  networkServiceInfo(H,_,opcua,opcua_port,_),
  netAccess(H,_,_)
  ),
  rule_desc('OPC UA Flooding', possible)).

interaction_rule(
  (dos(H) :-
  vulExists(H, VulID, Software, _, dos),
  cvss(VulID,AC),
  isTriggered(VulID),
  networkServiceInfo(H,Software,Protocol,Port,_),
  netAccess(H,Protocol,Port)
  ),
  rule_desc('DoS vulnerability exploit', cvss_ac(AC))).

/*From 'Denial of service attacks on network-based control systems: impact and mitigation'*/
interaction_rule(
  (dos(H) :-
  execCode(H2,Perm),
  hacl(H2,H,_,_)
  ),
  rule_desc('Local Network Attack', 1)).

/*****Information Disclosure*********/
interaction_rule(
  (accessInfo(H) :-
  vulExists(H,VulID,Software,_,leakinfo),
  cvss(VulID,AC),
  isTriggered(VulID),
  networkServiceInfo(H,Software,Protocol,Port,_),
  netAccess(H,Protocol,Port)
  ),
  rule_desc('Extracts info by exploiting vulnerability', cvss_ac(AC))).


/*****Covert appropriation*********/
/* From 'A Decoupled Feedback Structure for Covertly Appropriating Networked Control Systems' */

interaction_rule(
  (covertAppropriation(Scada) :-
  isSensor(Sensor),
  isCompromised(Sensor),
  isActuator(Actuator),
  isCompromised(Actuator),
  hacl(Sensor,Scada,_,_),
  hacl(Scada,Actuator,_,_)
  ),
  rule_desc('Covert Appropriation by compromising sensors and actuators', likely)).

interaction_rule(
  (covertAppropriation(PLC) :-
  isSensor(Sensor),
  isActuator(Actuator),
  execCode(PLC,_),
  hacl(Sensor,PLC,_,_),
  hacl(PLC,Actuator,_,_)
  ),
  rule_desc('Covert Appropriation by compromising the PLC', likely)).

interaction_rule(
  (covertAppropriation(PLC) :-
  isSensor(Sensor),
  isActuator(Actuator),
  hacl(Sensor,PLC,_,_),
  canSniffCommunication(Sensor,PLC),
  hacl(PLC,Actuator,_,_),
  canSniffCommunication(PLC,Actuator)
  ),
  rule_desc('Covert Appropriation by sniffing communication btw sensors/actuators and PLC', possible)).


/********************Physically compromising a sensor or an actuator************************************/
interaction_rule(
  (isCompromised(Sensor) :-
  isSensor(Sensor),
  physicalAccess(Principal,Sensor),
  malicious(Principal)
  ),
  rule_desc('Physically compromising a sensor', likely)).

interaction_rule(
  (isCompromised(Actuator) :-
  isActuator(Actuator),
  physicalAccess(Principal,Actuator),
  malicious(Principal)
  ),
  rule_desc('Physically compromising an actuator', likely)).
  

/********************Sniffing on a communication channel************************************/
interaction_rule(
  (canSniffCommunication(Device,Host) :-
  isCompromised(Device),
  hacl(Device,Host,_,_)
  ),
  rule_desc('Compromise source of communication', likely)).

interaction_rule(
  (canSniffCommunication(device,Host) :-
  isCompromised(Device),
  hacl(Host,Device,_,_)
  ),
  rule_desc('Compromise end of communication', likely)).

  interaction_rule(
  (canSniffCommunication(H1,H2) :-
  execCode(H1,_),
  hacl(H1,H2,_,_)
  ),
  rule_desc('Exec code on origin node', likely)).

  interaction_rule(
  (canSniffCommunication(H1,H2) :-
  execCode(H2,_),
  hacl(H1,H2,_,_)
  ),
  rule_desc('Exec code on end node', likely)).






