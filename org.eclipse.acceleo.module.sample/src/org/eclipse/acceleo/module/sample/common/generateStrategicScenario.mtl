[comment encoding = UTF-8 /]
[module generateStrategicScenario('http://www.eclipse.org/papyrus/sysml/1.6/SysML', 'http://www.eclipse.org/uml2/5.0.0/UML', 'http://www.eclipse.org/uml2/5.0.0/UML/Profile/Standard')]


[template private underscoreIfEmpty(elem:OclAny, attribute:String) post(trim())]
[(if (elem.eGet(attribute)=null or elem.eGet(attribute)='') then '_' else elem.eGet(attribute) endif)/]
[/template]

[template private formatName(name:String) post(trim())]
[name.replace(' ', '').toLower()/]
[/template]

[template private formatName(names:Bag(String)) post(trim())]
[names.replace(' ', '').toLower()/]
[/template]

[template private writeHACLWithOptions(root:OclAny, conn:InformationFlow)]
[if(conn.informationTarget.eClass().name=('Port'->asBag()))]
hacl([formatName(conn.informationSource.oclAsType(Property).type.name)/], [formatName(conn.informationTarget.oclAsType(Port).eContainer(Class).name)/], [underscoreIfEmpty(root,'protocol')/], [formatName(conn.informationTarget.oclAsType(Port).name)/]).
[else]
hacl([formatName(conn.informationSource.oclAsType(Property).type.name)/], [formatName(conn.informationTarget.oclAsType(Property).name)/], [underscoreIfEmpty(root,'protocol')/], _).
[/if]
[/template]


[template private generateStakeholder(elem:OclAny) post(trim())]
[let user:Actor = elem.eGet('base_Actor').oclAsType(Actor)]
[let exposure:String = elem.eGet('exposure').toString()]
stakeHolder([formatName(user.name)/],[translateImportanceLevel(exposure)/]).
[/let]
[/let]
[/template]

[template private generateHasAccess(elem:OclAny) post(trim())]
[let dependency:Dependency = elem.eGet('base_Dependency').oclAsType(Dependency)]
hasAccess([formatName(dependency.client.name)/],[formatName(dependency.supplier.name)/]).
[/let]
[/template]

[template private generateAttacker(elem:OclAny, m:Model) post(trim())]
[let attacker:Actor = elem.eGet('base_Actor').oclAsType(Actor)]
[for (prop:Property | m.eAllContents(Property))]
[if (prop.type=attacker)]
attackerLocated([formatName(prop.eContainer(Class).name)/]).
[/if]
[/for]
[/let]
[/template]


[template private generateHACL(elem: OclAny, m: Model) post(trim())]
[let conn:InformationFlow = elem.eGet('base_InformationFlow').oclAsType(InformationFlow)]
[if(m.siblings()->exists(node| (node.eClass().name='Host' or node.eClass().name='Device') and node.eGet('base_Class').oclAsType(Class).name->asBag()=conn.informationSource.oclAsType(Property).type.name))]
[writeHACLWithOptions(elem, conn)/]
[/if]
[/let]
[/template]

[template private translateImportanceLevel(importance:String) post(trim())]
[if (importance='VeryHigh')]
'certain'
[/if]
[if (importance='High')]
'likely'
[/if]
[if (importance='Medium')]
'possible'
[/if]
[if (importance='Low')]
'unlikely'
[/if]
[if (importance='VeryLow')]
0
[/if]
[/template]

[template private generateAsset(elem:OclAny) post(trim())]
[let asset:Class = elem.eGet('base_Class').oclAsType(Class)]
[let importance:String = elem.eGet('importanceLevel').toString()]
isAsset([formatName(asset.name)/],[translateImportanceLevel(importance)/]).
[/let]
[/let]
[/template]

[template private generateAssetLocation(elem:OclAny) post(trim())]
[let host:Class = elem.eGet('base_Class').oclAsType(Class)]
[let assets:OclAny = elem.eGet('assets')]
[for(item : OclAny | assets)]
[let asset:Class = item.eGet('base_Class').oclAsType(Class)]
assetLocated([formatName(asset.name)/],[formatName(host.name)/]).
[/let]
[/for]
[/let]
[/let]
[/template]


[template public generateStrategicScenario( m : Model) post(trim())]
[file (m.name+'strategic.txt', false, 'UTF-8')]
[comment @main/]
attackGoal(targetAsset(_)).
[for (elem : OclAny | m.siblings())]
[let class:String = elem.eClass().name]
[if(class.contains('Attacker'))]
[generateAttacker(elem,m)/]
[/if]
[/let]
[/for]


/********Stakeholders***************/
[for (elem : OclAny | m.siblings())]
[let class:String = elem.eClass().name]
[if(class.contains('User'))]
[generateStakeholder(elem)/]
[/if]
[/let]
[/for]

[for (elem : OclAny | m.siblings())]
[let class:String = elem.eClass().name]
[if(class.contains('physicalAccess') or class.contains('hasAccount'))]
[generateHasAccess(elem)/]
[/if]
[/let]
[/for]


/******************Hosts and Connections************************/
[for (elem: OclAny | m.siblings())]
[let class:String = elem.eClass().name]
[if (class.contains('Connection'))]
[generateHACL(elem,m)/]
[/if]
[/let]
[/for]


/********************Assets**************************/
[for (elem: OclAny | m.siblings())]
[let class:String = elem.eClass().name]
[if (class.contains('Asset'))]
[generateAsset(elem)/]
[/if]
[/let]
[/for]

[for (elem: OclAny | m.siblings())]
[let class:String = elem.eClass().name]
[if (class.contains('Host'))]
[generateAssetLocation(elem)/]
[/if]
[/let]
[/for]
[/file]
[/template]



