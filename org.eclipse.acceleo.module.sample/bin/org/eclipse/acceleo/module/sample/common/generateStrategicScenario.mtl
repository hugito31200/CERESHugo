[comment encoding = UTF-8 /]
[module generateStrategicScenario('http://www.eclipse.org/papyrus/sysml/1.6/SysML', 'http://www.eclipse.org/uml2/5.0.0/UML', 'http://www.eclipse.org/uml2/5.0.0/UML/Profile/Standard')]

[import org::eclipse::acceleo::module::sample::services::utils/]



[template private generateStakeholder(elem:OclAny) post(trim())]
[let user:Actor = elem.eGet('base_Actor').oclAsType(Actor)]
[let exposure:String = elem.eGet('exposure').toString()]
stakeHolder([formatName(user.name)/],[translateImportanceLevel(exposure)/]).
[/let]
[/let]
[/template]

[template private generateHasAccess(elem:OclAny) post(trim())]
[let dependency:Dependency = elem.eGet('base_Dependency').oclAsType(Dependency)]
hasAccess([formatName(dependency.client.name)/],[formatName(dependency.supplier.name)/]).
[/let]
[/template]


[template private generateHACL(elem: OclAny, m: Model) post(trim())]
[let conn:InformationFlow = elem.eGet('base_InformationFlow').oclAsType(InformationFlow)]
[if(m.siblings()->exists(node| (node.eClass().name='Host' or node.eClass().name='Device') and node.eGet('base_Class').oclAsType(Class).name->asBag()=conn.informationSource.oclAsType(Property).type.name))]
[writeHACLWithOptions(elem, conn)/]
[/if]
[/let]
[/template]

[template private generateNetworkServiceInfo(elem: OclAny, m : Model) post(trim())]
[let host:Class = elem.eGet('base_Class').oclAsType(Class)]
[for (program:Property | host.ownedAttribute->selectByType(Property))]
[let isProgram : Boolean = program.type.getAppliedStereotypes().toString().contains('Program') = true->asBag()]
[if (isProgram)]
networkServiceInfo([formatName(host.name)/], [formatName(program.name)/], _, _, _).
[/if]
[/let] 
[/for]
[/let]
[/template]

[template private translateImportanceLevel(importance:String) post(trim())]
[if (importance='VeryHigh')]
'certain'
[/if]
[if (importance='High')]
'likely'
[/if]
[if (importance='Medium')]
'possible'
[/if]
[if (importance='Low')]
'unlikely'
[/if]
[if (importance='VeryLow')]
0
[/if]
[/template] 

[template private generateAsset(elem:OclAny) post(trim())]
[let asset:Class = elem.eGet('base_Class').oclAsType(Class)]
[let importance:String = elem.eGet('importance').toString()]
isAsset([formatName(asset.name)/],[translateImportanceLevel(importance)/]).
[/let]
[/let]
[/template]

[template private generateAttackGoal(elem:OclAny) post(trim())]
[let asset:Class = elem.eGet('base_Class').oclAsType(Class)]
[for (property:OclAny | elem.eGet('securityProperty'))]
/*attackGoal(targetAsset([formatName(asset.name)/],[formatName(property.toString())/])).*/
[/for]
[/let]
[/template]


[template public generateStrategicScenario( m : Model) post(trim())]
[file (m.name+'strategic.txt', false, 'UTF-8')]
[comment @main/]

[for (elem : OclAny | m.siblings())]
[let class:String = elem.eClass().name]
[if(class.contains('Attacker'))]
[generateAttackerLocation(elem,m)/]
[/if]
[/let]
[/for]

/********************Attack Goals**************************/
/*Uncomment to run one or multiple attack goals*/


/*attackGoal(targetAsset(_,_)).*/
[for (elem: OclAny | m.siblings())]
[if (elem.eGet('isAsset')=true)]
[generateAttackGoal(elem)/]
[/if]
[/for]

/********************Assets**************************/
[for (elem: OclAny | m.siblings())]
[if (elem.eGet('isAsset')=true)]
[generateAsset(elem)/]
[/if]
[/for]


/********Stakeholders***************/
[for (elem : OclAny | m.siblings())]
[let class:String = elem.eClass().name]
[if(class.contains('User'))]
[generateStakeholder(elem)/]
[/if]
[/let]
[/for]

[for (elem : OclAny | m.siblings())]
[let class:String = elem.eClass().name]
[if(class.contains('physicalAccess') or class.contains('hasAccount'))]
[generateHasAccess(elem)/]
[/if]
[/let]
[/for]


/******************Hosts and Connections************************/
[for (elem: OclAny | m.siblings())]
[let class:String = elem.eClass().name]
[if (class.contains('Connection'))]
[generateHACL(elem,m)/]
[/if]
[/let]
[/for]

[for (elem: OclAny | m.siblings())]
[let class:String = elem.eClass().name]
[if (class.contains('Host'))]
[generateNetworkServiceInfo(elem,m)/]
[/if]
[/let]
[/for]


[comment][for (elem: OclAny | m.siblings())]
[let class:String = elem.eClass().name]
[if (class.contains('Host'))]
[generateAssetLocation(elem)/]
[/if]
[/let]
[/for][/comment]
[/file]
[/template]



