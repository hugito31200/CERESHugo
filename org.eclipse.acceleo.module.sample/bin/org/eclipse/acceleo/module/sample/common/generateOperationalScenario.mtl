[comment encoding = UTF-8 /]
[module generateOperationalScenario('http://www.eclipse.org/papyrus/sysml/1.6/SysML', 'http://www.eclipse.org/uml2/5.0.0/UML', 'http://www.eclipse.org/uml2/5.0.0/UML/Profile/Standard')]

[import org::eclipse::acceleo::module::services::refinement/]

[template private underscoreIfEmpty(elem:OclAny, attribute:String) post(trim())]
[(if (elem.eGet(attribute)=null or elem.eGet(attribute)='') then '_' else elem.eGet(attribute) endif)/]
[/template]

[template private formatName(name:String) post(trim())]
[name.replaceAll(' ', '_').toLower()/]
[/template]

[template private formatName(names:Bag(String)) post(trim())]
[names.replaceAll(' ', '_').toLower()/]
[/template]


[template private getProgramUser(program: Class, m : Model) post(trim())]
[for(elem:OclAny | m.siblings())]
[if(elem.eClass().name.contains('Program') and elem.eGet('base_Class').oclAsType(Class)=program)]
[underscoreIfEmpty(elem,'user')/]
[/if]
[/for]
[/template]

[template private getHostOfProgram(prog:Class, m:Model) post(trim())]
[for (prop: Property | m.eAllContents(Property))]
[if (prop.type = prog)]
[formatName(prop.eContainer(Class).name)/]
[/if]
[/for]
[/template]

[template private writeHACLWithOptions(root:OclAny, conn:InformationFlow) post(trim())]
[if(conn.informationTarget.eClass().name=('Port'->asBag()))]
hacl([formatName(conn.informationSource.oclAsType(Property).type.name)/], [formatName(conn.informationTarget.oclAsType(Port).eContainer(Class).name)/], [underscoreIfEmpty(root,'protocol')/], [formatName(conn.informationTarget.oclAsType(Port).name)/]).
[else]
hacl([formatName(conn.informationSource.oclAsType(Property).type.name)/], [formatName(conn.informationTarget.oclAsType(Property).name)/], [underscoreIfEmpty(root,'protocol')/], _).
[/if]
[/template]

[template private generateNetworkServiceInfo(elem: OclAny, m : Model) post(trim())]
[let host:Class = elem.eGet('base_Class').oclAsType(Class)]
[for (program:Property | host.ownedAttribute->selectByType(Property))]
[let isProgram : Boolean = program.type.getAppliedStereotypes().toString().contains('Program') = true->asBag()]
[if (isProgram)]
[let hasConnection : Boolean = m.siblings()->exists(elem:OclAny | elem.eClass().name='Connection' and elem.eGet('base_InformationFlow').oclAsType(InformationFlow).informationSource.name=program.name->asBag())]
[if ((hasConnection))]
[for (elem2: OclAny | m.siblings())]
[if (elem2.eClass().name='Connection')]
[let conn:InformationFlow = elem2.eGet('base_InformationFlow').oclAsType(InformationFlow)]
[if(conn.informationSource.name=program.name->asBag())]
[let connectedToPort : Boolean = (conn.informationTarget.oclIsTypeOf(Port)=true->asBag())]
networkServiceInfo([formatName(host.name)/], [formatName(program.type.name)/], [underscoreIfEmpty(elem2, 'protocol')/], [(if connectedToPort then formatName(conn.informationTarget.name) else '_' endif)/], [getProgramUser(program.type.oclAsType(Class),m)/]).
[/let]
[/if]
[/let]
[/if]
[/for]
[else]
networkServiceInfo([formatName(host.name)/], [formatName(program.type.name)/], _, _, [getProgramUser(program.type.oclAsType(Class),m)/]).
[/if]
[/let]
[/if]
[/let] 
[/for]
[/let]
[/template]

[template private generateHACL(elem: OclAny, m: Model) post(trim())]
[let conn:InformationFlow = elem.eGet('base_InformationFlow').oclAsType(InformationFlow)]
[if(m.siblings()->exists(node| (node.eClass().name='Host' or node.eClass().name='Device') and node.eGet('base_Class').oclAsType(Class).name->asBag()=conn.informationSource.oclAsType(Property).type.name))]
[writeHACLWithOptions(elem, conn)/]
[/if]
[/let]
[/template]

[template private generateDevice(elem: OclAny, m: Model) post(trim())]
[let device:Class = elem.eGet('base_Class').oclAsType(Class)]
[if (elem.eGet('type').toString()='Actuator')]
isActuator([formatName(device.name)/]).
[else]
isSensor([formatName(device.name)/]).
[/if]
[/let]
[/template]

[template private generateUser(elem:OclAny) post(trim())]
[let user:Actor = elem.eGet('base_Actor').oclAsType(Actor)]
[if (elem.eGet('isCompetent')=true)]
competent([formatName(user.name)/]).
[else]
inCompetent([formatName(user.name)/]).
[/if]
[if (elem.eGet('isMalicious')=true)]
malicious([formatName(user.name)/]).
[/if]
[/let]
[/template]

[template private translateAttackType(type:OclAny) post(trim())]
[let typeName: String = type.toString()]
[if(typeName='DenialOfService')]
dos
[/if]
[if(typeName='ExecCode')]
execCode
[/if]
[if(typeName='CovertAppropriation')]
covertAppropriation
[/if]
[if(typeName='StealData')]
accessInfo
[/if]
[/let]
[/template]


[template private generateAttackerLocation(elem:OclAny, m:Model) post(trim())]
[let attacker:Actor = elem.eGet('base_Actor').oclAsType(Actor)]
[for (prop:Property | m.eAllContents(Property))]
[if (prop.type=attacker)]
attackerLocated([formatName(prop.eContainer(Class).name)/]).
[/if]
[/for]
[/let]
[/template]

[template private generateAttacker(elem:OclAny, m:Model) post(trim())]
[generateAttackerLocation(elem,m)/]
[/template]

[template private generateHasAccount(elem:OclAny) post(trim())]
[let dependency:Dependency = elem.eGet('base_Dependency').oclAsType(Dependency)]
hasAccount([formatName(dependency.client.name)/],[formatName(dependency.supplier.name)/],[underscoreIfEmpty(elem, 'account')/]).
[/let]
[/template]

[template private generatePhysicalAccess(elem:OclAny) post(trim())]
[let dependency:Dependency = elem.eGet('base_Dependency').oclAsType(Dependency)]
physicalAccess([formatName(dependency.client.name)/],[formatName(dependency.supplier.name)/]).
[/let]
[/template]

 
[template private generateDependency(elem:OclAny, m:Model) post(trim())]
[let dependency:Dependency = elem.eGet('base_Dependency').oclAsType(Dependency)]
[let progs:Bag(Class) = dependency.client.oclAsType(Class)]
[for (prog:Class | progs)]
dependsOn([getHostOfProgram(prog, m)/],[formatName(prog.name)/],[formatName(dependency.supplier.name)/]).
[/for]
[/let]
[/let]
[/template]

[template private generateAsset(elem:OclAny) post(trim())]
[let asset:Class = elem.eGet('base_Class').oclAsType(Class)]
[for (property:OclAny | elem.eGet('securityProperty'))]
/*attackGoal(targetAsset([formatName(asset.name)/],[formatName(property.toString())/])).*/
[/for]
[/let]
[/template]

[template private generateRefinement(elem:OclAny) post(trim())]
[let prog:Class = elem.eGet('base_Class').oclAsType(Class)]
[prog.refine(elem.eGet('version').toString())/]
[/let]
[/template]


[template public generateOperationalScenario( m : Model) post(trim())]
[file (m.name+'operational.txt', false, 'UTF-8')]
[comment @main/]
/*****************Attacker*************************/
[for (elem: OclAny | m.siblings())]
[let class:String = elem.eClass().name]
[if(class.contains('Attacker'))]
[generateAttacker(elem, m)/]
[/if]
[/let]
[/for]

/********************Attack Goals**************************/
/*Uncomment to run one or multiple attack goals*/


[for (elem: OclAny | m.siblings())]
[if (elem.eGet('isAsset')=true)]
[generateAsset(elem)/]
[/if]
[/for]


/*********************Programs************************/
[for (elem: OclAny | m.siblings())]
[let class:String = elem.eClass().name]
[if (class.contains('Host'))]
[generateNetworkServiceInfo(elem,m)/]
[/if]
[/let]
[/for]

/******************Connections**********************/
[for (elem: OclAny | m.siblings())]
[let class:String = elem.eClass().name]
[if (class.contains('Connection'))]
[generateHACL(elem,m)/]
[/if]
[/let]
[/for]

/*********************Devices************************/
[for (elem: OclAny | m.siblings())]
[let class:String = elem.eClass().name]
[if (class.contains('Device'))]
[generateDevice(elem,m)/]
[/if]
[/let]
[/for]


/****************************Users******************************/
[for (elem: OclAny | m.siblings())]
[let class:String = elem.eClass().name]
[if (class.contains('User'))]
[generateUser(elem)/]
[/if]
[/let]
[/for]

[for (elem: OclAny | m.siblings())]
[let class:String = elem.eClass().name]
[if(class.contains('hasAccount'))]
[generateHasAccount(elem)/]
[/if]
[/let]
[/for]

[for (elem: OclAny | m.siblings())]
[let class:String = elem.eClass().name]
[if(class.contains('physicalAccess'))]
[generatePhysicalAccess(elem)/]
[/if]
[/let]
[/for]

/****************************Refinement******************************/
[for (elem: OclAny | m.siblings())]
[let class:String = elem.eClass().name]
[if (class.contains('Program'))]
[generateRefinement(elem)/]
[/if]
[/let]
[/for]

[/file]

[/template]




